generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")// connect url
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum EventType {
  START
  FINISH
  GOAL
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  OWN_GOAL
  SHOTS
  SHOTS_ON_TARGET
  BIG_CHANCES_CREATED
  KEY_PASSES
  SUCCESSFUL_DRIBBLES
  SAVE
}

enum Position {
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  FORWARD
}

enum MatchStatus {
  COMPLETED
  ONGOING
  SCHEDULED
}

model User {
  id          Int @id @default(autoincrement())
  name        String
  email       String @unique
  password    String
  gender      Gender
  dateOfBirth DateTime
  role        Role
  votes       Vote[]
  favouriteClubId Int?
  favouriteClub Club? @relation(fields: [favouriteClubId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tournament {
  id          String @id
  vietNamName String
  englishName String
  description String?
  seasons     Season[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Season {
  id          Int @id @default(autoincrement())
  name        String?
  logoURL     String?
  description String?
  startDate   DateTime?
  endDate     DateTime?
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  isActive    Boolean?
  tournamentId String
  seasonClubId SeasonClub[]
  matchs      Match[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Club {
  id          Int @id @default(autoincrement())
  name        String
  shortName   String?
  bio         String? @db.LongText
  coach       String
  logoURL     String
  players     Player[]
  homeMatches Match[]  @relation("HomeMatches")
  awayMatches Match[]  @relation("AwayMatches")
  foundedYear Int
  stadium     String
  stadiumDescription String?
  stadiumAddress String?
  stadiumMap String?
  stadiumCapacity Int?
  stadiumImage Int?
  seasonClubs SeasonClub[]
  events      Event[]
  followers   User[]
  lineups     Lineup[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SeasonClub {
  id          Int @id @default(autoincrement())
  season      Season @relation(fields: [seasonId], references: [id])
  seasonId    Int
  club        Club @relation(fields: [clubId], references: [id])
  clubId      Int
}

model Player {
  id          Int @id @default(autoincrement())
  name        String
  imageURL    String
  nationality String
  dateOfBirth DateTime
  height      Float
  weight      Float
  position    Position
  facebook    String?
  instagram   String?
  twitter     String?
  clubId      Int?
  club        Club? @relation(fields: [clubId], references: [id])
  events      Event[] @relation("Player")
  assists     Event[] @relation("Assist")
  votes       Vote[]
  lineups     Lineup[]
  shirtNumber Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Match {
  id          Int @id @default(autoincrement())
  homeClub    Club? @relation("HomeMatches", fields: [homeClubId], references: [id])
  homeClubId  Int?
  awayClub    Club? @relation("AwayMatches", fields: [awayClubId], references: [id])
  awayClubId  Int?
  stadium     String?
  homeScore   Int @default(0)
  awayScore   Int @default(0)
  status      MatchStatus @default(SCHEDULED)
  date        DateTime
  time        String?
  referee     String
  season      Season @relation(fields: [seasonId], references: [id])
  seasonId    Int
  events      Event[]
  votes       Vote[]
  lineups     Lineup[]
  matchImages MatchImage[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lineup {
  id          Int @id @default(autoincrement())
  matchId     Int
  match       Match @relation(fields: [matchId], references: [id])
  clubId      Int
  club        Club @relation(fields: [clubId], references: [id])
  playerId    Int
  player      Player @relation(fields: [playerId], references: [id])
  isStarting  Boolean
}

model Event {
  id          Int @id @default(autoincrement())
  matchId     Int
  match       Match @relation(fields: [matchId], references: [id])
  playerId    Int?
  player      Player? @relation("Player", fields: [playerId], references: [id])
  clubId      Int?
  club        Club? @relation(fields: [clubId], references: [id])
  eventType   EventType
  eventTime   Int
  comment     String?
  assistId    Int?
  assist      Player? @relation("Assist",fields: [assistId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model News {
  id          Int @id @default(autoincrement())
  title       String
  content     String @db.LongText
  thumbnail   String
  tag         String?
  status      String?
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          Int @id @default(autoincrement())
  title       String
  thumbnail   String
  linkPDF     String?
  label       String?
  content     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Sponsor {
  id          Int @id @default(autoincrement())
  logoURL     String
  name        String
  officialWebsite String
  description String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Vote {
  id          Int @id @default(autoincrement())
  userId      Int
  user        User @relation(fields: [userId], references: [id])
  matchId     Int
  match       Match @relation(fields: [matchId], references: [id])
  playerId    Int
  player      Player @relation(fields: [playerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MatchImage {
  id          Int @id @default(autoincrement())
  matchId     Int
  match       Match @relation(fields: [matchId], references: [id])
  imageURL    String
}