generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int @id @default(autoincrement())
  email       String @unique
  name        String
  password    String
  role        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tournament {
  id          String @id
  vietNamName String
  englishName String
  description String?
  seasons     Season[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Season {
  id          Int @id @default(autoincrement())
  name        String?
  logoURL     String?
  description String?
  startDate   DateTime?
  endDate     DateTime?
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  isActive    Boolean?
  tournamentId String
  seasonClubId SeasonClub[]
  matchs      Match[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Club {
  id          Int @id @default(autoincrement())
  name        String
  shortName   String?
  stadium     String
  stadiumDescription String?
  coach       String
  logoURL     String
  players     Player[]
  homeMatchs  Match[]  @relation("HomeMatches")
  awayMatchs  Match[]  @relation("AwayMatches")
  foundedYear Int
  seasonClub  SeasonClub[]
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SeasonClub {
  id          Int @id @default(autoincrement())
  season      Season @relation(fields: [seasonId], references: [id])
  seasonId    Int
  club        Club @relation(fields: [clubId], references: [id])
  clubId      Int
}

model Player {
  id          Int @id @default(autoincrement())
  name        String
  imageURL    String
  nationality String
  dateOfBirth DateTime
  height      Float
  weight      Float
  position    String
  clubId      Int
  shirtNumber Int
  club        Club @relation(fields: [clubId], references: [id])
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Match {
  id          Int @id @default(autoincrement())
  homeClub    Club? @relation("HomeMatches", fields: [homeClubId], references: [id])
  homeClubId  Int?
  awayClub    Club? @relation("AwayMatches", fields: [awayClubId], references: [id])
  awayClubId  Int?
  stadium     String?
  homeScore   Int?
  awayScore   Int?
  status      String?
  date        DateTime
  time        String?
  season      Season @relation(fields: [seasonId], references: [id])
  seasonId    Int
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          Int @id @default(autoincrement())
  matchId     Int
  match       Match @relation(fields: [matchId], references: [id])
  playerId    Int
  player      Player @relation(fields: [playerId], references: [id])
  clubId      Int
  club        Club @relation(fields: [clubId], references: [id])
  eventType   String
  eventTime   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model News {
  id          Int @id @default(autoincrement())
  title       String
  content     String
  thumbnail   String
  tag         String?
  status      String?
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          Int @id @default(autoincrement())
  title       String
  thumbnail   String
  linkPDF     String?
  label       String?
  content     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}